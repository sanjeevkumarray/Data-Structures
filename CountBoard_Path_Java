package DymamicProgramming;

public class CountBoard_Path {
    public static long start;
    public static long end;

    public static void startAlgo() {
        start = System.currentTimeMillis();
    }

    public static long endAlgo() {
        end = System.currentTimeMillis();
        return end - start;
    }

    public static void main(String[] args) {

        int n = 30;
        int[] strg = new int[n + 1];

        startAlgo();
        System.out.println(cbp(n, 0));
        System.out.println("CBP  Normal storage took time" + endAlgo() + "ms");

        startAlgo();
        System.out.println(cbpRS(n, 0, strg));
        System.out.println("CBP  Recursive storage took time" + endAlgo() + "ms");


        startAlgo();
        System.out.println(cbpIS(n, 0 ));
        System.out.println("CBP  Iterative storage took time" + endAlgo() + "ms");
    }


    public static int fib(int n) {
        if (n == 1) {
            return n;
        }
        if (n == 0) {
            return n;
        }
        int fnm1 = fib(n - 1);
        int fnm2 = fib(n - 2);
        int fn = fnm1 + fnm2;
        return fn;
    }

    public static int fibRS(int n, int[] strg) {
        if (n == 1) {
            return n;
        }
        if (n == 0) {
            return n;
        }
        if (strg[n] != 0) {
            return strg[n];
        }
        int fnm1 = fibRS(n - 1, strg);
        int fnm2 = fibRS(n - 2, strg);
        int fn = fnm1 + fnm2;
        strg[n] = fn;
        return fn;

    }

    public static int fibIS(int n) {
        int[] strg = new int[n + 1];


        //seed
        strg[0] = 0;
        strg[1] = 1;

        for (int i = 2; i <= n; i++) {
            strg[i] = strg[i - 1] + strg[i - 2];
        }
        return strg[n];
    }

    public static int cbp(int end, int curr) {
        if (end == curr) {
            return 1;
        }
        if (curr > end) {
            return 0;
        }

        int count = 0;
        for (int disc = 1; disc <= 6; disc++) {
            count = count + cbp(end, curr + disc);
        }
        return count;
    }


    public static int cbpRS(int end, int curr, int[] strg) {
        if (end == curr) {
            return 1;
        }
        if (curr > end) {
            return 0;
        }
        if (strg[curr] != 0) {
            return strg[curr];
        }
        int count = 0;
        for (int disc = 1; disc <= 6; disc++) {
            count = count + cbpRS(end, curr + disc, strg);
        }
        strg[curr] = count;
        return count;
    }

    public static int cbpIS(int end, int curr) {
        int[] strg = new int[end + 1];
        //seed

        strg[end] = 1;
        for (int i = end - 1; i >= 0; i--) {
            int count = 0;
            for (int disc = 1; disc <= 6 && disc+i <strg.length ; disc++) {
                count =count+strg[disc+i];
            }
            strg [i]=count;
        }
         return strg[curr];

    }

}
